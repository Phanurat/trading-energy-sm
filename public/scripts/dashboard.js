const contractABI = [
    {
        "inputs": [{ "internalType": "string", "name": "_data", "type": "string" }],
        "name": "setName",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "getName",
        "outputs": [{ "internalType": "string", "name": "", "type": "string" }],
        "stateMutability": "view",
        "type": "function"
    }
];

let web3;
let contract;

async function init() {
    if (window.ethereum) {
        web3 = new Web3(window.ethereum);
        await window.ethereum.request({ method: 'eth_requestAccounts' });
        await loadContractOptions();
    } else {
        alert("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á MetaMask ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô");
    }
}

async function loadContractOptions() {
    const selector = document.getElementById("contractSelector");
    selector.innerHTML = "<option>‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</option>";

    try {
        const response = await fetch("/api/contracts"); // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô endpoint ‡∏ô‡∏µ‡πâ‡∏ï‡∏≤‡∏° backend ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
        const data = await response.json();

        selector.innerHTML = "";

        data.forEach(item => {
            const option = document.createElement("option");
            option.value = item.id_contracts;
            option.textContent = `ID ${item.id} - ${item.id_contracts}`;
            selector.appendChild(option);
        });

        selector.addEventListener("change", onContractChange);
        if (data.length > 0) {
            await onContractChange(); // load ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÄ‡∏•‡∏¢
        }

    } catch (err) {
        console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ contract ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err);
        document.getElementById("status").textContent = "‚ùå ‡πÇ‡∏´‡∏•‡∏î contract ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß";
    }
}

async function onContractChange() {
    const address = document.getElementById("contractSelector").value;
    contract = new web3.eth.Contract(contractABI, address);
    console.log("üì¶ Loaded contract:", address);
    document.getElementById("status").textContent = `üìç ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å: ${address}`;
    await loadOrders();
}

async function loadOrders() {
    const list = document.getElementById("orderList");
    list.innerHTML = "";
    const status = document.getElementById("status");

    try {
        const encoded = await contract.methods.getName().call();
        console.log("üì¶ Encoded:", encoded);

        const decoded = JSON.parse(atob(encoded));
        console.log("üîì Decoded:", decoded);

        decoded.forEach(order => {
            const li = document.createElement("li");
            li.innerHTML = `
          üÜî Order ID: <strong>${order[0]}</strong><br>
          üìÖ Date: ${order[1]}<br>
          üßæ Type: ${order[2]}<br>
          üìå Status: ${order[3]}<br>
          ‚ö° Energy: ${order[4]} kWh<br>
          üí∏ Avg Price: ${order[5]} THB<br>
          üí∞ Total: ${order[6]} THB
        `;
            list.appendChild(li);
        });

        status.textContent = `‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß (${decoded.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)`;

    } catch (err) {
        console.error("‚ùå Error:", err);
        status.textContent = "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏à‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î)";
    }
}

init();